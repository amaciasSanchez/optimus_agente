## SCHEDULER
server.port=8573
spring.application.name=fileviewertask
server.servlet.context-path=/fileviewertask
logging.config=log4j2.xml
logging.level.root=INFO
logging.level.claro.edx.optimus.processs=INFO
logging.level.o.a.coyote.http11.Http11InputBuffer=DEBUG
debug=false

spring.http.encoding.charset=UTF-8
spring.http.encoding.enabled=true

filterFilesWALKED=.json|.JSON

#Desarrollo
filesFolder=/dockerappsvol/dockerappdata/edx/DATA/sftp
#Produccion
#filesFolder=/procesos/home/gsioper/ftp/optimus
fileViewerUrl=http://edx-fileviewer-msa.openshift-apps.dev.conecel.com

###############################
# CONSIDERACIONES GENERALES
###############################
## CHECK-IN
## Ruta desde donde se consume los archivos de chequeo (Personal de financiero).
ruta.lectura.checkin=${filesFolder}/04entregados/checkin
## Que tipos de extension, son los archivos que se consumer
filterFiles.checkin=.txt|.TXT|.json|.dat|.optimus
## Endpoint donde se coloca el analisis
## Ruta donde los archivos chequeados por claro se colocan en el server para enviar a bancos
ruta.checkin.exito=${filesFolder}/04entregados/enviarBancos

# El proceso interbancario especifico y unico tiene parametrizado su ID y NAME
interbank.id=CONECEL
interbank.name=Interbancario
# Configuracion CRON para el proceso: Analisis de archivos de folder RECIBIDOS huawei y resumen JSON y envío mongo
fileAnalysisScheduler.cron=0 0/2 * * * ?
#0/5 * * ? * *
# Configuracion CRON para el proceso: Status de directorio RECIBIDOS, es decir cada periodo envía que archivos existen.
statusDirectoryScheduler.cron=0 0/1 * * * ?
# Rutas de Lectura de caidas de archivos para verificar aprobar previo a envio a bancos.
ruta.lectura.1=${filesFolder}/02recibidos/bank
ruta.lectura.2=${filesFolder}/02recibidos/interbank
ruta.lectura.3=${filesFolder}/02recibidos/tarjetas
ruta.lectura.4=${filesFolder}/02recibidos/backup
ruta.lectura.5=${filesFolder}/06walked

## CHECK-IN
#ruta.lectura.checkin=${filesFolder}/04entregados/checkin
ruta.escritura=${filesFolder}/06walked
RESTinvoke.fileViewerGetCreditCardEP=${fileViewerUrl}/fileviewer/api/putStatusDir
RESTinvoke.fileViewerPutStatusEndpoint=${fileViewerUrl}/fileviewer/api/putStatusDir
RESTinvoke.fileViewerPutResumenEndpoint=${fileViewerUrl}/fileviewer/api/putFileResumen
#
RESTinvoke.fileViewerPutcheckInDirEndpoint=${fileViewerUrl}/fileviewer/api/putCheckinDir
# Lista de las extensiones que se pueden procesar
filterFilesRecibidos=.txt|.TXT
# Extension FINAL de archivos aprobados para procesamiento.
files.send=chk
# BANK type: La sumatoria de la columna del campo monto del archivo, no contempla CENTAVOS y debe dividirse para 100
dataPayment.dividir100.bank=true
# INTERBANK type: La sumatoria de la columna del campo monto del archivo, no contempla CENTAVOS y debe dividirse para 100
dataPayment.dividir100.interbank=true
# CREDIT CARD type: La sumatoria de la columna del campo monto del archivo, no contempla CENTAVOS y debe dividirse para 100
dataPayment.dividir100.creditCard=true
# Bloque el proceso de fileAnalyzer(analizar Archivos, hacer resumen, enviar para que pongan en base), se debe reiniciar para que se aplique.
dataPayment.activateFileAnalyzer=true
#Habilita el proceso de gestion de archivos (Eliminar Enviar). en caso de estar FALSE. el proceso no hace ningun ajuste a los archivos.
dataPayment.enableFileManagement=true